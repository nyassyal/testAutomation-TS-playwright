/*
    //Notes automatically generated by AI

    keyof is a TypeScript utility type that allows you to extract the keys of an object type as a union of string literal types.

    Wrapper objects are used to create objects that can hold primitive values and provide additional methods and properties.
    For example, String, Number, and Boolean are wrapper objects for the primitive types string, number, and boolean respectively.
    They are useful when you need to treat primitive values as objects, allowing you to call
    methods on them or pass them to functions that expect objects.
    However, it's generally recommended to use primitive types directly unless you specifically need the functionality of wrapper objects.
    Using wrapper objects can lead to unnecessary complexity and performance overhead.


    In this case, we can use string instead of String for better performance and simplicity.

    In short, prefer using primitive types like string, number, and boolean over their wrapper object counterparts String, Number, and Boolean.
    Only use wrapper objects when you need the additional functionality they provide, such as methods for string manipulation or number formatting.
    Example: const userName: string = "John Doe";
    // This is a primitive type, not a wrapper object.
    const userEmail: String = "john.doe@example.com";
    // This is a wrapper object, we need this wrapper object to use methods like toUpperCase() or toLowerCase() on the email.

    Cannot have any string methods on a primitive type like string.
    However, we can use methods on a wrapper object like String.
*/ 
type UserOne = {
    name: String; // String is a wrapper object type in TypeScript
    email: string; // String is a wrapper object type in TypeScript
}

type UserKeys = keyof UserOne; //name | email

function getValue(obj: UserOne, key: UserKeys) {
    return obj[key];
}   

let users: UserOne = {
    name: "John Doe",
    email: "john.doe@example.com"
};

const userValue = getValue(users, "name"); // "John Doe"
console.log(userValue); // Output: John Doe